name: üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞

on:
  workflow_dispatch: {}

jobs:
  release:
    name: üì¶ –†–µ–ª–∏–∑ v${{ github.run_number }}
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: write
      pull-requests: write
      issues: write

    env:
      REGISTRY_URL: cr.yandex
      APP_NAME: app
      YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}

    steps:
      - name: üîç Checkout –∫–æ–¥–∞
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∏ —Ç–µ–≥–∏

      - name: üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: npm ci

      - name: üßπ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ª–∏–Ω—Ç–µ—Ä
        run: npm run lint

      - name: üß™ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —Ç–µ—Å—Ç—ã
        run: npm run test

      - name: üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ–≥–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        run: |
          git fetch --tags
          git tag

      - name: üìú –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–µ–ª–∏–∑–∞
        id: commits
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo 'initial')

          if [ "$LAST_TAG" = "initial" ]; then
            if git rev-parse --verify HEAD > /dev/null 2>&1; then
              COMMITS="–ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑"
            else
              COMMITS="–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—É—Å—Ç"
            fi
          else
            COMMITS=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          fi

          if [ -z "$COMMITS" ]; then
            COMMITS="–ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤"
          fi

          ESCAPED_COMMITS=$(echo "$COMMITS" | sed -z 's/\n/\\n/g')
          echo "commits=$ESCAPED_COMMITS" >> $GITHUB_OUTPUT

      - name: üå≤ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ç–∫–∏
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}

      - name: üè∑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –≤–µ—Ä—Å–∏–∏
        run: |
          git tag v${{ github.run_number }}
          git push origin v${{ github.run_number }}

      - name: üê≥ –°–±–æ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–∞
        run: |
          DOCKER_IMAGE_LATEST=${REGISTRY_URL}/${YC_REGISTRY_ID}/${APP_NAME}:${{ github.run_number }}_latest
          DOCKER_IMAGE_VERSIONED=${REGISTRY_URL}/${YC_REGISTRY_ID}/${APP_NAME}:${{ github.run_number }}
          docker build -t $DOCKER_IMAGE_VERSIONED .
          docker tag $DOCKER_IMAGE_VERSIONED $DOCKER_IMAGE_LATEST

      - name: üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Container Registry
        run: |
          echo "${{ secrets.YC_OAUTH_TOKEN }}" | docker login --username oauth --password-stdin $REGISTRY_URL

      - name: üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ Container Registry
        run: |
          DOCKER_IMAGE_LATEST=${REGISTRY_URL}/${YC_REGISTRY_ID}/${APP_NAME}:${{ github.run_number }}_latest
          DOCKER_IMAGE_VERSIONED=${REGISTRY_URL}/${YC_REGISTRY_ID}/${APP_NAME}:${{ github.run_number }}
          docker push $DOCKER_IMAGE_VERSIONED
          docker push $DOCKER_IMAGE_LATEST

      - name: üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG.md —á–µ—Ä–µ–∑ Pull Request
        id: changelog
        run: |
          NEW_ENTRY="## v${{ github.run_number }}\n$(date '+%Y-%m-%d')\n$ESCAPED_COMMITS\n"
          NEW_ENTRY=$(echo "$NEW_ENTRY" | sed 's/\\n/\n/g')

          git checkout -b update-changelog/v${{ github.run_number }}

          if [ -f CHANGELOG.md ]; then
            if ! grep -q "v${{ github.run_number }}" CHANGELOG.md; then
              echo "–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CHANGELOG.md"
              echo -e "$NEW_ENTRY" | cat - CHANGELOG.md > temp && mv temp CHANGELOG.md
            else
              echo "–ó–∞–ø–∏—Å—å –¥–ª—è v${{ github.run_number }} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ CHANGELOG.md"
              exit 0
            fi
          else
            echo "–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª CHANGELOG.md"
            echo -e "$NEW_ENTRY" > CHANGELOG.md
          fi

          git add CHANGELOG.md
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"
          git commit -m "docs: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG –¥–ª—è v${{ github.run_number }}"
          git push origin update-changelog/v${{ github.run_number }} --force

          echo "changelog_branch=update-changelog/v${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: üîÑ –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Pull Request —á–µ—Ä–µ–∑ GitHub API
        id: create_pr
        uses: actions/github-script@v6
        with:
          script: |
            const { pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "docs: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG –¥–ª—è v${{ github.run_number }}",
              head: process.env.changelog_branch,
              base: "main",
              body: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG –ø–æ—Å–ª–µ —Ä–µ–ª–∏–∑–∞ v${{ github.run_number }}"
            });
            return pr.number;

      - name: ‚è± –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –º–µ—Ä–¥–∂–µ–º
        run: sleep 5

      - name: üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ä–¥–∂ PR
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh auth login --with-token <<< "$GH_TOKEN"

          PR_NUMBER=$(gh pr list --head update-changelog/v${{ github.run_number }} --json number --jq '.[0].number')

          gh pr merge $PR_NUMBER --merge --admin --delete-branch

      - name: üßæ –°–æ–∑–¥–∞–Ω–∏–µ Issue –æ —Ä–µ–ª–∏–∑–µ
        uses: actions/github-script@v6
        with:
          script: |
            const lines = context.env.commits ? context.env.commits.split('\\n') : ['–ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤'];
            const formatted = lines.join('\n');

            const body = `
              üìÖ –î–∞—Ç–∞: ${new Date().toISOString()}
              üë®‚Äçüíª –ê–≤—Ç–æ—Ä: ${{ github.actor }}
              üì¶ –í–µ—Ä—Å–∏—è: ${{ github.run_number }}
              üì¶ Docker image: ${{ env.REGISTRY_URL }}://${{ env.YC_REGISTRY_ID }}://${{ env.APP_NAME }}:${{ github.run_number }}
              üìå –ö–æ–º–º–∏—Ç—ã —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–µ–ª–∏–∑–∞:
              ${formatted}
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "üöÄ –í—ã–ø—É—Å–∫ —Ä–µ–ª–∏–∑–∞ v${{ github.run_number }}",
              body: body
            });
        env:
          commits: ${{ steps.commits.outputs.commits }}