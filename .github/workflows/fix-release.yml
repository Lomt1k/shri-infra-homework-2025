name: üõ†Ô∏è –§–∏–∫—Å —Ä–µ–ª–∏–∑–∞

on:
  workflow_dispatch:
    inputs:
      release_version:
        type: string
        description: "–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ñ–∏–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12)"
        required: true

jobs:
  fix_release:
    name: üì¶ –§–∏–∫—Å —Ä–µ–ª–∏–∑–∞ v${{ github.run_number }}
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: write
      pull-requests: write
      issues: write

    env:
      REGISTRY_URL: cr.yandex
      APP_NAME: app
      YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
      RELEASE_VERSION: ${{ github.event.inputs.release_version }}

    steps:
      - name: üîç Checkout –∫–æ–¥–∞
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∏ —Ç–µ–≥–∏

      - name: üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–ª–∏–∑–Ω—É—é –≤–µ—Ç–∫—É
        run: |
          git fetch origin releases/${RELEASE_VERSION}
          git checkout -b releases/${RELEASE_VERSION} origin/releases/${RELEASE_VERSION}

      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: npm ci

      - name: üßπ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ª–∏–Ω—Ç–µ—Ä
        run: npm run lint

      - name: üß™ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —Ç–µ—Å—Ç—ã
        run: npm run test

      - name: üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ–≥–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        run: |
          git fetch --tags
          git tag

      - name: üìú –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ñ–∏–∫—Å–∞ –∏–ª–∏ —Ä–µ–ª–∏–∑–∞
        id: commits
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo 'initial')

          echo "LAST_TAG: $LAST_TAG"

          if [ "$LAST_TAG" = "initial" ]; then
            if git rev-parse --verify HEAD > /dev/null 2>&1; then
              COMMITS="–ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑"
            else
              COMMITS="–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—É—Å—Ç"
            fi
          else
            COMMITS=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          fi

          if [ -z "$COMMITS" ]; then
            COMMITS="–ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤"
          fi

          ESCAPED_COMMITS=$(echo "$COMMITS" | sed -z 's/\n/\\n/g')

          printf 'commits=%s\n' "$ESCAPED_COMMITS" >> $GITHUB_OUTPUT

      - name: üê≥ –°–±–æ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–∞
        run: |
          DOCKER_IMAGE_FIX=${REGISTRY_URL}/${YC_REGISTRY_ID}/${APP_NAME}:${RELEASE_VERSION}_fix${{ github.run_number }}
          DOCKER_IMAGE_LATEST=${REGISTRY_URL}/${YC_REGISTRY_ID}/${APP_NAME}:${RELEASE_VERSION}_latest
          docker build -t $DOCKER_IMAGE_FIX .
          docker tag $DOCKER_IMAGE_FIX $DOCKER_IMAGE_LATEST

      - name: üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Container Registry
        run: |
          echo "${{ secrets.YC_OAUTH_TOKEN }}" | docker login --username oauth --password-stdin $REGISTRY_URL

      - name: üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ Container Registry
        run: |
          DOCKER_IMAGE_FIX=${REGISTRY_URL}/${YC_REGISTRY_ID}/${APP_NAME}:${RELEASE_VERSION}_fix${{ github.run_number }}
          DOCKER_IMAGE_LATEST=${REGISTRY_URL}/${YC_REGISTRY_ID}/${APP_NAME}:${RELEASE_VERSION}_latest
          docker push $DOCKER_IMAGE_FIX
          docker push $DOCKER_IMAGE_LATEST

      - name: üè∑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ —Ñ–∏–∫—Å–∞
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"
          git tag v${RELEASE_VERSION}.fix.${{ github.run_number }}
          git push origin v${RELEASE_VERSION}.fix.${{ github.run_number }}

      - name: üßæ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ Issue —Ä–µ–ª–∏–∑–∞
        uses: actions/github-script@v6
        with:
          script: |
            const lines = process.env.COMMITS ? process.env.COMMITS.split('\\n') : ['–ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤'];
            const formatted = lines.join('\n');

            const body = `
              üìÖ –î–∞—Ç–∞: ${new Date().toISOString()}
              üë®‚Äçüíª –ê–≤—Ç–æ—Ä: ${{ github.actor }}
              üì¶ –í–µ—Ä—Å–∏—è: ${{ env.RELEASE_VERSION }}.fix.${{ github.run_number }}
              üì¶ Docker image: ${{ env.REGISTRY_URL }}://${{ env.YC_REGISTRY_ID }}://${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}_fix${{ github.run_number }}
              üìå –ö–æ–º–º–∏—Ç—ã —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–µ–ª–∏–∑–∞:
              ${formatted}
            `;

            // –ò—â–µ–º Issue –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              creator: 'github-actions[bot]',
              state: 'open',
              per_page: 100,
              labels: ''
            });

            const targetIssue = issues.find(issue => issue.title.includes("üöÄ –í—ã–ø—É—Å–∫ —Ä–µ–ª–∏–∑–∞ v${{ env.RELEASE_VERSION }}"));

            if (targetIssue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: targetIssue.number,
                body: body
              });
            } else {
              console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ Issue –¥–ª—è —Ä–µ–ª–∏–∑–∞ v${{ env.RELEASE_VERSION }}');
            }
        env:
          COMMITS: ${{ steps.commits.outputs.commits }}